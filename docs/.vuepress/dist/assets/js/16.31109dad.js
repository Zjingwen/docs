(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{314:function(t,e,n){"use strict";n.r(e);var a=n(38),s=Object(a.a)({},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"react-demo"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react-demo","aria-hidden":"true"}},[t._v("#")]),t._v(" React-demo")]),t._v(" "),n("div",{staticClass:"language-text extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("react-demo: https://github.com/Zjingwen/react-demo\n欢迎git clone\n")])])]),n("h2",{attrs:{id:"react的方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react的方法","aria-hidden":"true"}},[t._v("#")]),t._v(" React的方法")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://lh3.googleusercontent.com/-jRhjzvFA3xI/W_uliAGt2wI/AAAAAAAAAF4/GbUq0TYYoagiQ2bhFq_GIQnako7FHnqkQCHMYCw/I/WechatIMG2006.png",alt:"WechatIMG2006"}})]),t._v(" "),n("h2",{attrs:{id:"生命周期详解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#生命周期详解","aria-hidden":"true"}},[t._v("#")]),t._v(" 生命周期详解")]),t._v(" "),n("h3",{attrs:{id:"constructor-实例化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#constructor-实例化","aria-hidden":"true"}},[t._v("#")]),t._v(" constructor 实例化")]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("React"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Component")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("ul",[n("li",[t._v("实例化对象")]),t._v(" "),n("li",[t._v("继承React.Component")]),t._v(" "),n("li",[t._v("初始化state")])]),t._v(" "),n("h3",{attrs:{id:"static-getderivedstatefromprops"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#static-getderivedstatefromprops","aria-hidden":"true"}},[t._v("#")]),t._v(" static getDerivedStateFromProps")]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("React"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Component")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getDerivedStateFromProps")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("props"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("state")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Object\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("ul",[n("li",[t._v("update更新时，render之前，dom渲染前")]),t._v(" "),n("li",[t._v("必须有初始化state")]),t._v(" "),n("li",[t._v("静态方法，没有this")]),t._v(" "),n("li",[t._v("可以return出对象，设置state")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("class Count extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      count: 0,\n    }\n  };\n\n  static getDerivedStateFromProps(props){\n    return {count: props.count*2};\n  };\n\n  render(){\n    return (\n      <React.Fragment>\n        <p>Count-Child-state: {this.state.count}</p>\n        <p>Count-Child-props: {this.props.count}</p>\n      </React.Fragment>\n    )\n  }\n};\n\nclass Time extends Component{\n  constructor(props){\n    super(props);\n    this.state={\n      time: this.props.time,\n    }\n  };\n\n  static getDerivedStateFromProps(props,state){\n    console.log(state);\n    return null;\n  };\n\n  handleClick(){\n    this.setState({\n      time: new Date().toString()\n    });\n  }\n\n  render(){\n    const {time} = this.state;\n    return(\n      <React.Fragment>\n        <input type='button' value='setState触发 详情看log' onClick={()=>this.handleClick()}/> \n        <p>{time}</p>\n      </React.Fragment>\n    )\n  };\n};\n\nfunction GetDerivedStateFromPropsComponent (){\n  const [count,setCount] = useState(0);\n  const [time] = useState(new Date().toString());\n\n  return (\n    <Fieldset title='getDerivedStateFromProps'>\n      <input type='button' value='new props ++' onClick={()=>setCount(s=>s+1)}/>\n      <Count count={count}/>\n      <Time time={time}/>\n    </Fieldset>\n  )\n};\n")])])]),n("h3",{attrs:{id:"shouldcomponentupdate"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#shouldcomponentupdate","aria-hidden":"true"}},[t._v("#")]),t._v(" shouldComponentUpdate")]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("React"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Component")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("shouldComponentUpdate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("nextProps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nextState")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Boolean\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("ul",[n("li",[t._v("update更新时，render之前，dom渲染前")]),t._v(" "),n("li",[t._v("return 一个布尔值来判断是否渲染")]),t._v(" "),n("li",[t._v("默认return true")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("class Time extends Component{\n  shouldComponentUpdate(nextPorps){\n    if(this.props.time !== nextPorps.time){\n      // 保证每次time不同时更新\n      console.group('shouldComponent-props');\n      console.log(nextPorps);\n      console.log(this.props);\n      console.groupEnd();\n      return true;\n    }\n    return false;\n  };\n  \n  render(){\n    return(\n      <React.Fragment>\n        {this.props.time}\n      </React.Fragment>\n    )\n  }\n};\n\nfunction ShuldComponentUpdateComponent() {\n  const [time,setTime] = useState(new Date().toString());\n\n  return(\n    <Fieldset title='shuldComponentUpdate'>\n      <input type='button' value='new Props' onClick={()=>setTime(new Date().toString())} />\n      <Time time={time}/>\n    </Fieldset>\n  )\n};\n")])])]),n("h3",{attrs:{id:"render"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#render","aria-hidden":"true"}},[t._v("#")]),t._v(" render")]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("React"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Component")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSX")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("ul",[n("li",[t._v("将jsx渲染为真实DOM")])]),t._v(" "),n("h3",{attrs:{id:"getshapshotbeforeupdate"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#getshapshotbeforeupdate","aria-hidden":"true"}},[t._v("#")]),t._v(" getShapshotBeforeUpdate")]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("React"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Component")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getShapshotBeforeUpdate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("prevProps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("prevState")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ‘getShapshotBeforeUpdate’\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("componentDidUpdate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("prevProps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("prevState"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("snapshot")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t   "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TODO snapshot == ‘getShapshotBeforeUpdate’")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("ul",[n("li",[t._v("update更新时，render之前，dom渲染前")]),t._v(" "),n("li",[t._v("无默认返回值，可返回null")]),t._v(" "),n("li",[t._v("return 一个值，用来作为componentDidUpdate的第三个参数")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("class Child extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ...props,\n    };\n  }\n\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    console.group('getSnapshotBeforeUpdate');\n    console.log(prevProps);\n    console.log(prevState);\n    console.groupEnd();\n    if (prevProps.time !== prevState.time) {\n      this.setState({\n        time: prevProps.time,\n      });\n    }\n    return 'getSnapshotBeforeUpdate';\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    console.group('componentDidUpdate');\n    console.log(prevProps);\n    console.log(prevState);\n    console.log(snapshot);\n    console.groupEnd();\n  }\n\n  render() {\n    return (\n      <p>\n        {this.state.time}\n      </p>\n    );\n  }\n}\n\nfunction GetShapshotBeforeUpdateComponent() {\n  const [time, setTime] = useState(new Date().toString());\n\n  return (\n    <Fieldset title='getShapshotBeforeUpdate'>\n      <Child time={time} />\n      <input type='button' value='更新时间' onClick={()=>setTime(new Date().toString())} />\n    </Fieldset>\n  );\n}\n")])])]),n("h3",{attrs:{id:"componentdidmount"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#componentdidmount","aria-hidden":"true"}},[t._v("#")]),t._v(" componentDidMount")]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("React"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Component")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("componentDidMount")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("ul",[n("li",[t._v("render之后，dom渲染后")]),t._v(" "),n("li",[t._v("唯一的会在服务端渲染调起的生命周期钩子函数。")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("class Time extends Component {\n  componentDidMount() {\n    console.log('ComponentDidMount');\n  }\n\n  render() {\n    return (\n      <p>{new Date().toString()}</p>\n    );\n  }\n}\n\nfunction ComponentDidMountComponent() {\n  const [show, setShow] = useState(false);\n  return (\n    <Fieldset title='componentDidMount'>\n      <input type='button' value='触发componentDidMount' onClick={()=>setShow(!show)} />\n      { show && <Time />}\n    </Fieldset>\n  );\n}\n")])])]),n("h3",{attrs:{id:"componentdidupdate"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#componentdidupdate","aria-hidden":"true"}},[t._v("#")]),t._v(" componentDidUpdate")]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("React"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Component")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("componentDidUpdate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("prevProps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("prevState"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("snapshot")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("ul",[n("li",[t._v("update更新时，render之后，dom渲染后")]),t._v(" "),n("li",[t._v("snapshot为getShapshotBeforeUpdate的return")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("参照getShapshotBeforeUpdate的code demo\n")])])]),n("h3",{attrs:{id:"componentwillunmount"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#componentwillunmount","aria-hidden":"true"}},[t._v("#")]),t._v(" componentWillUnmount")]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("React"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Component")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("componentWillUnmount")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("ul",[n("li",[t._v("dom卸载")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("class Time extends Component {\n  componentWillUnmount() {\n    console.log('componentWillUnmount');\n  }\n  render() {\n    return (\n      <p>{new Date().toString()}</p>\n    );\n  };\n}\n\nfunction ComponentWillUnmountComponent() {\n  const [show, setShow] = useState(true);\n  return (\n    <Fieldset title='componentWillUnmount'>\n      <input type='button' value='触发componentWillUnmount' onClick={()=> setShow(!show)} />\n      {show && <Time />}\n    </Fieldset>\n  );\n}\n")])])]),n("h3",{attrs:{id:"componentdidcatch"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#componentdidcatch","aria-hidden":"true"}},[t._v("#")]),t._v(" componentDidCatch")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("class A extends React.Component{\n    componentDidCatch(error,errorInfo){}\n}\n")])])]),n("ul",[n("li",[t._v("只有在render中报错才会被捕获")]),t._v(" "),n("li",[t._v("为什么不用try/catch：try/catch更加适合命令式代码，而componentDidCatch会捕获组件树中的报错")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("class ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state={\n      error: false,\n      errorInfo: null,\n    };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    console.log(errorInfo.componentStack);\n    this.setState({\n      error: error.toString(),\n      errorInfo: errorInfo.componentStack,\n    });\n  }\n\n  render() {\n    if (this.state.error) {\n      return (\n        <div>\n          <h1>error: {this.state.error}</h1>\n          <p>\n            errorInfo:{this.state.errorInfo}\n          </p>\n        </div>\n      );\n    }\n    return this.props.children;\n  }\n};\nErrorBoundary.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nclass Input extends Component {\n  constructor() {\n    super();\n    this.state= {\n      throw: false,\n    };\n  }\n\n  handleClick() {\n    this.setState((s)=>({\n      throw: !s.throws,\n    }));\n  }\n\n  render() {\n    if (this.state.throw) throw new Error('I throw');\n    return <input type='button' value='触发catch' onClick={()=> this.handleClick()} />;\n  }\n};\n\nfunction ComponentDidCatchComponent() {\n  return (\n    <Fieldset title='componentDidCatch'>\n      <ErrorBoundary>\n        <Input />\n      </ErrorBoundary>\n    </Fieldset>\n  );\n};\n")])])]),n("h2",{attrs:{id:"触发流程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#触发流程","aria-hidden":"true"}},[t._v("#")]),t._v(" 触发流程")]),t._v(" "),n("h3",{attrs:{id:"初始化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#初始化","aria-hidden":"true"}},[t._v("#")]),t._v(" 初始化")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("constructor()\nstatic getDerivedStateFromProps(props,state)\nrender()\ncomponentDidMount()\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("class Flow extends React.Component{\n  constructor(){\n    super();\n    this.state = {};\n    console.group('初始化阶段');\n    console.log('constructor');\n  };\n\n  static getDerivedStateFromProps(){\n    console.log('getDerivedStateFromProps');\n    return null;\n  };\n\n  componentDidMount(){\n    console.log('componentDidMount');\n    console.groupEnd();\n  }\n  \n  render(){\n    console.log('render');\n    return (\n      <p>\n        constructor<br/>\n        |<br/>\n        static getDerivedStateFromProps()<br/>\n        |<br/>\n        render<br/>\n        |<br/>\n        componentDidMount<br/>\n      </p>\n    )\n  };\n}\n\n\nfunction MountingComponent (){\n  const [show,setShow] = useState(false);\n\n  return (\n    <Fieldset title='初始化阶段'>\n      <input type='button' value='查看初始化阶段，详情看log' onClick={()=>setShow(!show)}/>\n      {show && <Flow/>}\n    </Fieldset>\n  )\n};\n")])])]),n("h3",{attrs:{id:"属性更新"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#属性更新","aria-hidden":"true"}},[t._v("#")]),t._v(" 属性更新")]),t._v(" "),n("p",[t._v("New Props")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("static getDerivedStateFromProps(props,state)\nshouldComponentUpdate(nextProps, nextState)\nrender()\ngetSnapshotBeforeUpdate(prevProps,prevState)\ncomponentDidUpdate()\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("class Flow extends React.Component{\n  state = {};\n\n  static getDerivedStateFromProps(){\n    console.group('触发传递新的props');\n    console.log('getDevivedStateFromProps');\n    return null;\n  };\n\n  shouldComponentUpdate(){\n    console.log('shouldComponentUpdate');\n    return true;\n  };\n\n  getSnapshotBeforeUpdate(){\n    console.log('getSnapshotBeforeUpdate');\n    return null;\n  };\n\n  componentDidUpdate(){\n    console.log('componentDidUpdate');\n    console.groupEnd();\n  };\n\n  render(){\n    console.log('render');\n    return(\n      <React.Fragment>\n        <p>{this.props.title}</p>\n        <p>\n          static getDevivedStateFromPorps <br/>\n          | <br/>\n          shouldComponentUpdate <br/>\n          | <br/>\n          getSnapshotBeforeUpdate <br/>\n          | <br/>\n          componentDidUpdate\n        </p>\n      </React.Fragment>\n    )\n  }\n};\n\nfunction NewpropsComponent(){\n  const [time,setTime] = useState(new Date().toString());\n\n  return (\n    <Fieldset title='传递新的props'>\n      <input type='button' value='触发传递新的props' onClick={()=>setTime(new Date().toString())}/>\n      <Flow title={time}/>\n    </Fieldset>\n  )\n};\n\nexport default NewpropsComponent;\n")])])]),n("p",[t._v("setState()")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("static getDerivedStateFromProps()\nshouldComponentUpdate()\nrender()\ngetSnapshotBeforeUpdate()\ncomponentDidUpdate()\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("class SetStateComponent extends React.Component{\n  state = {\n    time: new Date().toString(),\n  };\n  \n  static getDerivedStateFromProps(){\n    console.group('设置属性');\n    console.log('getDerivedStateFromProps');\n    return null;\n  };\n\n  shouldComponentUpdate(){\n    console.log('shouldComponentUpdate')\n    return true;\n  };\n\n  getSnapshotBeforeUpdate(){\n    console.log('getSnapshotBeforeUpdate');\n    return null;\n  };\n\n  componentDidUpdate(){\n    console.log('componentDidUpdate');\n    console.groupEnd();\n  };\n\n  handleClick(){\n    this.setState({\n      time: new Date().toString()\n    });\n  }\n\n  render(){\n    console.log('render');\n    return (\n      <Fieldset title='设置属性'>\n        <input type='button' value='更新时间' onClick={()=>this.handleClick()} />\n        <p>{this.state.time}</p>\n        static getDerivedStateFromProps <br />\n        | <br />\n        shouldComponentUpdate <br />\n        | <br />\n        render <br />\n        | <br />\n        getSnapshotBeforeUpdate <br />\n        | <br />\n        componentDidUpdate <br />\n      </Fieldset>\n    )\n  }\n}\n")])])]),n("p",[t._v("forceUpdate()")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("getDerivedStateFromProps()\nrender()\ngetShapshotBeforeUpdate()\ncomponentDidUpdate()\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("class ForceUpdateComponent extends React.Component{\n  state = {};\n\n  static getDerivedStateFromProps(){\n    console.group('forecUpdate更新');\n    console.log('getDerivedStateFromProps');\n    return true;\n  };\n\n  getSnapshotBeforeUpdate(){\n    console.log('getShapshotBeforeUpdate');\n    return null;\n  };\n\n  componentDidUpdate(){\n    console.log('componentDidUpdate');\n    console.groupEnd();\n  }\n\n  render(){\n    console.log('render')\n    return(\n      <Fieldset title='forecUpdate更新'>\n        <input type='button' value='触发forecUpdae' onClick={()=>this.forceUpdate()} /> <br/>\n        static getDerivedStateFromProps <br/>\n        | <br/>\n        getShapshotBeforeUpdate <br/>\n        | <br/>\n        componentDidUpdate <br/>\n      </Fieldset>\n    )\n  }\n}\n")])])]),n("h2",{attrs:{id:"触发生命周期的api"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#触发生命周期的api","aria-hidden":"true"}},[t._v("#")]),t._v(" 触发生命周期的api")]),t._v(" "),n("h3",{attrs:{id:"setstate-设置状态"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#setstate-设置状态","aria-hidden":"true"}},[t._v("#")]),t._v(" setState 设置状态")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("setState((State)=>({object}),function callback])\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// 完全写法\nthis.setState(State=>({\n    ...State\n}),()=>{\n    ...\n})\n\n// 简单写法\nthis.setState({\n    ...\n})\n")])])]),n("ul",[n("li",[t._v("触发一轮生命周期"),n("code",[t._v("getDerivedStateFromProps->shouldComponentUpdate->render->getSnapshotBeforeUpdate->componentDidUpdate")])]),t._v(" "),n("li",[t._v("prevState为当前组件的state值")]),t._v(" "),n("li",[t._v("callback，为状态设置之后，state经过所有生命周期后调用")])]),t._v(" "),n("h3",{attrs:{id:"forceupage-强制更新"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#forceupage-强制更新","aria-hidden":"true"}},[t._v("#")]),t._v(" forceUpage 强制更新")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("forceUpage(function callback)\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("this.forceUpage(()=>{\n    ...\n})\n")])])]),n("ul",[n("li",[t._v("触发一轮生命周期"),n("code",[t._v("getDerivedStateFromProps->render->componentDidUpdate")])]),t._v(" "),n("li",[t._v("callback，为生命周期之后调用")])]),t._v(" "),n("h2",{attrs:{id:"react-component"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react-component","aria-hidden":"true"}},[t._v("#")]),t._v(" React.Component")]),t._v(" "),n("ul",[n("li",[t._v("react的抽象基础类")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("class A extends React.Component{}\n")])])]),n("h2",{attrs:{id:"react-purecomponent"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react-purecomponent","aria-hidden":"true"}},[t._v("#")]),t._v(" React.PureComponent")]),t._v(" "),n("ul",[n("li",[t._v("内置一个浅比较，比较props和state，决定是否render，用于提高性能")]),t._v(" "),n("li",[t._v("只是进行浅对比，无法对比复合数据")]),t._v(" "),n("li",[t._v("用于避免无状态组件的重复渲染")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v(" class A extends React.PureComponent{}\n")])])]),n("h2",{attrs:{id:"react-memo"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react-memo","aria-hidden":"true"}},[t._v("#")]),t._v(" React.memo(()=>{},()=>{});")]),t._v(" "),n("ul",[n("li",[t._v("组件仅在它的 props 发生改变的时候进行重新渲染")]),t._v(" "),n("li",[t._v("和React.PureComponent类似功能一直，但这是一个纯函数用法")]),t._v(" "),n("li",[t._v("只是进行浅对比，无法对比复合数据")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const A = React.memo((props)=>{\n    return JSX\n},(prevProps,nextProps)=>{\n    return null | false\n})\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const MemoComponent = React.memo((props)=>{\n  return (\n    <div>{props.time}</div>\n  );\n}, (prevProps, nextProps)=>{\n  if (prevProps.time !== nextProps.time) {\n    return null;\n  }\n  return false;\n});\n\nfunction Memo() {\n  const [time, setTime] = useState(new Date().toString());\n\n  return (\n    <Fieldset title='memo'>\n      memo\n      <input type='button' value='更新时间' onClick={()=>setTime(new Date().toString())} />\n      <MemoComponent time={time} />\n    </Fieldset>\n  );\n};\n")])])]),n("h2",{attrs:{id:"react-createref"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react-createref","aria-hidden":"true"}},[t._v("#")]),t._v(" React.createRef()")]),t._v(" "),n("ul",[n("li",[t._v("创建节点引用")]),t._v(" "),n("li",[t._v("通过ref属性附加到React元素")]),t._v(" "),n("li",[t._v("可以通过curent访问到节点")]),t._v(" "),n("li",[t._v("ref更新发生在componentDidMount、componentDidUpdate时")]),t._v(" "),n("li",[t._v("无法在函数组件上使用，因为没有实例")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("class CreateRefComponent extends Component {\n  constructor() {\n    super();\n    this.state = {\n      el: null,\n    };\n    this.ref = React.createRef();\n  }\n\n  componentDidMount() {\n    this.setState({\n      el: this.ref.current.innerHTML,\n    });\n  }\n\n  render() {\n    return (\n      <Fieldset title='createRef'>\n        <div ref={this.ref}>createRef</div>\n        <p>el: {this.state.el}</p>\n      </Fieldset>\n    );\n  }\n}\n")])])]),n("h2",{attrs:{id:"react-isvalidelement-object"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react-isvalidelement-object","aria-hidden":"true"}},[t._v("#")]),t._v(" React.isValidElement(object)")]),t._v(" "),n("ul",[n("li",[t._v("验证对象是否为React元素。返回true或false。")]),t._v(" "),n("li",[t._v("必须传递一个对象")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("let D = React.createElement('div');\nReact.isValidElement(D);\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function ChildFunction() {\n  return (\n    <div>Child-function</div>\n  );\n};\n\nclass ChildComponent extends Component {\n  render() {\n    return (\n      <div>Child-Component</div>\n    );\n  }\n};\n\nfunction IsValidElementComponent() {\n  const D = React.createElement('div');\n\n  return (\n    <Fieldset title='isValidElement'>\n      <p>createElement: {React.isValidElement(D).toString()}</p>\n      <p>Function Component: {React.isValidElement(ChildFunction()).toString()}</p>\n      <p>class Component: {React.isValidElement(<ChildComponent />).toString()}</p>\n    </Fieldset>\n  );\n};\n")])])]),n("h2",{attrs:{id:"react-children"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react-children","aria-hidden":"true"}},[t._v("#")]),t._v(" React.Children")]),t._v(" "),n("ul",[n("li",[t._v("遍历children，返回数组")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("array React.Children.map(children,function callback) \n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("class Map extends Component {\n  render() {\n    const arr = React.Children.map(this.props.children, (v)=> v);\n\n    return (\n      <Fieldset title='map'>\n        {arr}\n      </Fieldset>\n    );\n  }\n};\nMap.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nfunction Index() {\n  return (\n    <Map>\n      <p>A</p>\n      <p>B</p>\n      <p>C</p>\n      <p>D</p>\n      <p>E</p>\n      <p>F</p>\n    </Map>\n  );\n};\n")])])]),n("ul",[n("li",[t._v("遍历children，无返回")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("void React.Children.forEach(children,function callback) \n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("class ForEact extends Component {\n  render() {\n    const arr = [];\n    React.Children.forEach(this.props.children, (v) => arr.push(v));\n    return (\n      <Fieldset title='ForEact'>\n        {arr}\n      </Fieldset>\n    );\n  }\n};\nForEact.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nfunction Index() {\n  return (\n    <ForEact>\n      <p>A</p>\n      <p>B</p>\n      <p>C</p>\n      <p>D</p>\n      <p>E</p>\n      <p>F</p>\n    </ForEact>\n  );\n};\n")])])]),n("ul",[n("li",[t._v("返回children的长度")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("number React.Children.count(children) \n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("class Count extends Component {\n  render() {\n    const count = React.Children.count(this.props.children, (v)=> v);\n\n    return (\n      <Fieldset title='count'>\n        {count}\n      </Fieldset>\n    );\n  }\n};\nCount.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nfunction Index() {\n  return (\n    <Count>\n      <p>A</p>\n      <p>B</p>\n      <p>C</p>\n      <p>D</p>\n      <p>E</p>\n      <p>F</p>\n    </Count>\n  );\n};\n")])])]),n("ul",[n("li",[t._v("判断children是否为1，不为1报错")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("void React.Children.only(children) \n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("class Only extends Component {\n  render() {\n    const {title} = this.props;\n\n    let e = null;\n    let o = null;\n\n    try {\n      o = React.Children.only(this.props.children);\n    } catch (error) {\n      e = error;\n    };\n    return (\n      <Fieldset title={title}>\n        {e && Object.keys(e).map((v) => e[v])}\n        {o}\n      </Fieldset>\n    );\n  }\n};\nOnly.propTypes = {\n  children: PropTypes.node.isRequired,\n  title: PropTypes.string.isRequired,\n};\n\nfunction Index() {\n  return (\n    <React.Fragment>\n      <Only title='not-Only'>\n        <p>A</p>\n        <p>B</p>\n        <p>C</p>\n        <p>D</p>\n        <p>E</p>\n        <p>F</p>\n      </Only>\n      <Only title='Only'>\n        <p>A</p>\n      </Only>\n    </React.Fragment>\n  );\n};\n")])])]),n("ul",[n("li",[t._v("把children，从对象转换为数组")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("array React.Children.toArray(children,function callback)\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("class ToArray extends Component {\n  render() {\n    const arr = React.Children.toArray(this.props.children);\n\n    return (\n      <Fieldset title='toArray'>\n        <p>isArray: {Array.isArray(arr).toString()}</p>\n        {arr}\n      </Fieldset>\n    );\n  }\n};\nToArray.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nfunction Index() {\n  return (\n    <ToArray>\n      <p>A</p>\n      <p>B</p>\n      <p>C</p>\n      <p>D</p>\n      <p>E</p>\n      <p>F</p>\n    </ToArray>\n  );\n};\n")])])]),n("h2",{attrs:{id:"react-fragment"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react-fragment","aria-hidden":"true"}},[t._v("#")]),t._v(" React.Fragment")]),t._v(" "),n("ul",[n("li",[t._v("允许创建一对React.Fragment的元素，这样就不用额外创建用于包裹的元素")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// 完全写法\nrender(){\n    return(\n        <React.Fragment>\n            hello React\n        </React.Fragment>\n    )\n}\n\n// 缩略写法\nrender(){\n    return(\n        <>\n            hello React\n        </>\n    )\n}\n")])])]),n("h2",{attrs:{id:"react-createelement"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react-createelement","aria-hidden":"true"}},[t._v("#")]),t._v(" React.createElement")]),t._v(" "),n("ul",[n("li",[t._v("创建react对象")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("React.createElement(\n  type,\n  [props],\n  [...children]\n);\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("class Hello extends React.Component {\n  render() {\n    return React.createElement('div', null, `Hello ${this.props.toWhat}`);\n  }\n}\n\nReactDOM.render(\n  React.createElement(Hello, {toWhat: 'World'}, null),\n  document.getElementById('root')\n);\n")])])]),n("h2",{attrs:{id:"react-createfactory"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react-createfactory","aria-hidden":"true"}},[t._v("#")]),t._v(" React.createFactory")]),t._v(" "),n("ul",[n("li",[t._v("返回一个React元素的函数。")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("React.createFactory({\n  type,\n  [props],\n  [...children]\n})\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function createFactory() {\n  const li = React.createFactory('li');\n  const Child1 = li(null, 'child-1');\n  const Child2 = li(null, 'child-2');\n\n  const Root = React.createElement('ul', '', Child1, Child2);\n\n  return (\n    <Fieldset title='createFactory'>\n      {Root}\n    </Fieldset>\n  );\n}\n")])])]),n("h2",{attrs:{id:"react-cloneelement"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react-cloneelement","aria-hidden":"true"}},[t._v("#")]),t._v(" React.cloneElement")]),t._v(" "),n("ul",[n("li",[t._v("克隆并返回一个新的React元素")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("React.cloneElement({\n    type,\n    [props],\n    [...children]\n})\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("class C extends React.Component {\n  render(){\n    var D = React.createElement('div');\n    return React.cloneElement(\n      D,\n      null,\n      'hello React'\n    );\n  }\n}\n")])])]),n("h2",{attrs:{id:"react-forwordref-props-ref"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react-forwordref-props-ref","aria-hidden":"true"}},[t._v("#")]),t._v(" React.forwordRef(props,ref)")]),t._v(" "),n("p",[n("code",[t._v("TODO @jingwen 需要独立文章分析")])]),t._v(" "),n("ul",[n("li",[t._v("引用转发ref给组件")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("React.forwordRef(props,ref)\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// 简单用法\nfunction Input(props) {\n  const {forwardRef} = props;\n  return (\n    <input type='input' defaultValue='输入框' ref={forwardRef} />\n  );\n};\nInput.propTypes = {\n  forwardRef: propTypes.object,\n};\nInput.defaultProps={\n  forwardRef: {},\n};\n\nclass ForwardRefComponent extends Component {\n  constructor() {\n    super();\n    this.state = {\n      refs: React.createRef(),\n    };\n  }\n\n  handleFocus() {\n    const {refs: {current}} = this.state;\n    current.focus();\n  }\n\n  render() {\n    const {refs} = this.state;\n    const FancyInput = React.forwardRef((props, ref)=>{\n      return <Input forwardRef={ref} />;\n    });\n\n    return (\n      <Fieldset title='forwardRef-简单用法'>\n        <FancyInput ref={refs} />\n        <input type='button' value='获取焦点' onClick={()=>this.handleFocus()} />\n      </Fieldset>\n    );\n  }\n}\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// 转发ref给后代\nfunction wrapped(Component) {\n  class Wrapped extends React.Component {\n    render() {\n      const {forwardedRef, ...props} = this.props;\n      return <Component ref={forwardedRef} {...props} />;\n    }\n  }\n  return React.forwardRef((props, ref) => {\n    return <Wrapped {...props} forwardedRef={ref} />;\n  });\n}\n\nclass Input extends React.Component {\n  constructor(props) {\n    super(props);\n    this.ref = React.createRef();\n  };\n\n  handleFocus() {\n    const {current} = this.ref;\n    current.focus();\n  }\n\n  render() {\n    const props = this.props;\n    return (\n      <input type='input' defaultValue={props.value} ref={this.ref} />\n    );\n  }\n}\n\nclass Hoc extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      refs: React.createRef(),\n    };\n  };\n\n  handleFocus() {\n    const {refs: {current}} = this.state;\n    current.handleFocus();\n  }\n\n  render() {\n    const {refs} = this.state;\n    const InputHoc = wrapped(Input);\n\n    return (\n      <Fieldset title='forwardRef-hoc-用法'>\n        <InputHoc value='forwardRef-hoc-用法' ref={refs} />\n        <input type='button' value='获取焦点' onClick={()=>this.handleFocus()} />\n      </Fieldset>\n    );\n  }\n};\n")])])]),n("h2",{attrs:{id:"react-lazy-or-react-suspense"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react-lazy-or-react-suspense","aria-hidden":"true"}},[t._v("#")]),t._v(" React.lazy or React.Suspense")]),t._v(" "),n("ul",[n("li",[t._v("React.lazy，动态导入组件")]),t._v(" "),n("li",[t._v("React.Suspense，等待导入时的显示")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const TimeFun = lazy(()=> import('./TimeFun'));\nconst TimeClass = lazy(()=> import('./TimeClass'));\n\nclass Index extends Component {\n  render() {\n    const Time = new Date().toString();\n    return (\n      <Fieldset title='lazy'>\n      <Suspense fallback={<div>Loading...</div>}>\n        <p>parent: {Time}</p>\n        <TimeFun />\n        <TimeClass />\n      </Suspense>\n      </Fieldset>\n    );\n  }\n}\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("class TimeClass extends React.Component {\n  render() {\n    const Time = new Date().toString();\n    return <div>lazy-time-class: {Time}</div>;\n  };\n};\n\nexport default TimeClass;\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function TimeFun() {\n  const Time = new Date().toString();\n  return (<div>lazy-time-fun: {Time}</div>);\n};\n\nexport default TimeFun;\n")])])]),n("h2",{attrs:{id:"react-strictmode"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react-strictmode","aria-hidden":"true"}},[t._v("#")]),t._v(" React.StrictMode")]),t._v(" "),n("ul",[n("li",[t._v("给组件的任何部分开启严格模式")]),t._v(" "),n("li",[t._v("识别具有不安全生命周期的组件")]),t._v(" "),n("li",[t._v("关于遗留字符串ref API使用的警告")]),t._v(" "),n("li",[t._v("关于已弃用的findDOMNode用法的警告")]),t._v(" "),n("li",[t._v("检测意外的副作用")]),t._v(" "),n("li",[t._v("检测遗留上下文API")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("class Index extends Component {\n  render() {\n    return (\n      <Fieldset title='StrictMode'>\n        <StrictMode>\n          StrictMode\n        </StrictMode>\n      </Fieldset>\n    );\n  }\n};\n")])])]),n("h2",{attrs:{id:"context"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#context","aria-hidden":"true"}},[t._v("#")]),t._v(" Context")]),t._v(" "),n("ul",[n("li",[t._v("组件设置全局参数")]),t._v(" "),n("li",[t._v("createContext，设置context的默认值")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const A = React.createContext('aaaa');\n")])])]),n("ul",[n("li",[t._v("Context.Provider，允许组件订阅该context的参数")]),t._v(" "),n("li",[t._v("Class.contextType，设置当前组件订阅的context。当找不到Provider的时候使用。context值可以在componentDidMount、componentUpdate、componentWillUnmount、render中获取")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("\n// 两种设置形式\nconst context = React.createContext('aaa');\nclass A extend React.Component{\n    static contextType = context;\n}\n\nclass B extend React.Component{\n\n}\nB.contextType = context;\n")])])]),n("ul",[n("li",[t._v("Context.Consumer，")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// 简单例子\nconst ThemeContext = React.createContext('light');\n\nclass ThemedButton extends React.Component {\n  static contextType = ThemeContext;\n  render() {\n    return <input defaultValue={this.context} type='input' />;\n  }\n}\n\nfunction Toolbar(props) {\n  return (\n    <div>\n      <ThemedButton />\n    </div>\n  );\n}\n\nclass Index extends Component {\n  render() {\n    return (\n      <Fieldset title='context'>\n        <Toolbar />\n        <ThemeContext.Provider value=\"dark\">\n          <Toolbar />\n        </ThemeContext.Provider>\n      </Fieldset>\n    );\n  }\n}\n")])])]),n("ul",[n("li",[t._v("Consumer，设置多个上下文")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const themes = {\n  light: {\n    background: '#eeeeee',\n  },\n  dark: {\n    background: '#222222',\n  },\n};\n\nconst ThemeContext = createContext(\n  themes.light,\n);\n\nclass ThemeButton extends Component {\n  static contextType = ThemeContext;\n  render() {\n    const props = this.props;\n    const theme = this.context;\n    return (\n      <button type='button' {...props} style={{backgroundColor: theme.background}} >\n        Theme\n      </button>\n    );\n  }\n};\n\nclass Index extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      theme: themes.light,\n    };\n  }\n\n  handleTheme() {\n    this.setState((state)=>({\n      theme: JSON.stringify(state.theme) === JSON.stringify(themes.dark)\n        ? themes.light\n        : themes.dark,\n    }));\n  };\n\n  render() {\n    return (\n      <Fieldset title='多context'>\n        <ThemeContext.Provider value={this.state.theme}>\n          <ThemeButton onClick={()=>this.handleTheme()}>\n            Change Theme\n          </ThemeButton>\n        </ThemeContext.Provider>\n        <ThemeButton />\n      </Fieldset>\n    );\n  }\n}\n")])])]),n("h2",{attrs:{id:"reactdom-createportal"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#reactdom-createportal","aria-hidden":"true"}},[t._v("#")]),t._v(" ReactDOM.createPortal")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("ReactDOM.createPortal(\n    React.Component | JSX, // react组件\n    element,// 节点元素\n);\n")])])]),n("h2",{attrs:{id:"defaultprops"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#defaultprops","aria-hidden":"true"}},[t._v("#")]),t._v(" defaultProps")]),t._v(" "),n("ul",[n("li",[t._v("设置props的默认值")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("class A extends React.Component{\n    constructor(props){\n        super(props);\n        console.log(props)\n    };\n    \n    // 集成写法\n    static defaultProps = {\n        test: 'test',        \n    };\n}\n\n// 外置写法\nA.defaultPorps = {\n    test: 'test',\n}\n")])])]),n("h2",{attrs:{id:"proptypes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#proptypes","aria-hidden":"true"}},[t._v("#")]),t._v(" PropTypes")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("TODO\n")])])]),n("h1",{attrs:{id:"render-props"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#render-props","aria-hidden":"true"}},[t._v("#")]),t._v(" Render Props")]),t._v(" "),n("ul",[n("li",[t._v("解决组件交叉使用问题")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function Cat(props) {\n  const STYLE = {\n    width: 20,\n    height: 20,\n    background: '#FF00FF',\n    position: 'absolute',\n    left: props.mouse.x,\n    top: props.mouse.y,\n  };\n\n  return (\n    <div style={STYLE} />\n  );\n}\nCat.propTypes = {\n  mouse: propTypes.object.isRequired,\n};\n\nclass Mouse extends Component {\n  constructor(props) {\n    super(props);\n    this.state={\n      x: 0,\n      y: 0,\n    };\n  }\n\n  handleMove(event) {\n    this.setState({\n      x: event.clientX,\n      y: event.clientY,\n    });\n  };\n\n  render() {\n    const STYLE = {\n      width: 500,\n      height: 500,\n      background: '#eee',\n      display: 'inline-block',\n    };\n\n    return (\n      <div style={STYLE} onMouseMove={(e)=>this.handleMove(e)}>\n        {this.props.render(this.state)}\n      </div>\n    );\n  }\n}\nMouse.propTypes = {\n  render: propTypes.func.isRequired,\n};\n\nclass Index extends Component {\n  render() {\n    return (\n      <Fieldset title='render props'>\n        <Mouse render={(mouse)=>(\n          <Cat mouse={mouse} />\n        )} />\n      </Fieldset>\n    );\n  }\n};\n")])])]),n("h1",{attrs:{id:"react的事件池"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#react的事件池","aria-hidden":"true"}},[t._v("#")]),t._v(" React的事件池")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("TODO\n")])])]),n("h1",{attrs:{id:"hooks"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hooks","aria-hidden":"true"}},[t._v("#")]),t._v(" Hooks")]),t._v(" "),n("h2",{attrs:{id:"usestate-状态钩"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#usestate-状态钩","aria-hidden":"true"}},[t._v("#")]),t._v(" useState 状态钩")]),t._v(" "),n("ul",[n("li",[t._v("用来设置和更新状态")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const [状态变量,更新函数] = useState(默认值)\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function A(){\n  const [count, setCount] = useState(0);\n\n  return(\n    <React.Fragment>\n      <p>Count: {count}</p>\n      <button onClick={()=>{setCount(count+1)}}>++</button>\n      <button onClick={()=>{setCount(count-1)}}>--</button>\n    </React.Fragment>\n  )\n};\n")])])]),n("h2",{attrs:{id:"useeffect-function-效果钩"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#useeffect-function-效果钩","aria-hidden":"true"}},[t._v("#")]),t._v(" useEffect(function,[]) 效果钩")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("useEffect(()=>{\n    // componentDidMount\n    // componentDidUpdate\n    return ()=>{\n        // componentWillUnmount\n    }\n},[]);\n")])])]),n("ul",[n("li",[t._v("useEffect是componentDidMount、componentDidUpdate、componentWillUnmount的结合。")]),t._v(" "),n("li",[t._v("默认情况下，useEffect，会在每次componentDidMount、componentDidUpdate时执行。")]),t._v(" "),n("li",[t._v("可以拿到DOM结构")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function A(){\n  const [count,setCount] = useState(0)\n\n  useEffect(()=>{\n    document.getElementById('useEffect-A-count').innerText = `count: ${count}`;\n  });\n\n  function handleClick(){\n    setCount(count+1);\n  };\n\n  return (\n    <Fieldset title='useEffect-简单状态'>\n      <p id='useEffect-A-count'></p>\n      <input type='button' value='更新' onClick={handleClick}/>\n    </Fieldset>\n  )\n};\n")])])]),n("ul",[n("li",[t._v("如何在组件compoenntWillUnmount时触发useEffect")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function B(){\n  const [show,setShow] = useState(true);\n  function Child(){\n    useEffect(()=>{\n      console.log('componentDidMount');\n      return ()=>{\n        console.log('componentWillUnmount');\n      }\n    })\n    return <p>B-Child</p>\n  };\n\n  return (\n    <Fieldset title='useEffect-在componentWillUnmunt时触发'>\n      <p>请查看log</p>\n      <input type='button' value='show' onClick={()=>setShow(!show)}/>\n      {show && <Child/>}\n    </Fieldset>\n  )\n};\n")])])]),n("ul",[n("li",[t._v("利用第二个参数，让useEffect不会过度渲染")]),t._v(" "),n("li",[t._v("为空数组，表示不依赖props或者state，将不会更新")]),t._v(" "),n("li",[t._v("数组内表示当新的赋值，如果新值和旧值不想等，就更新")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function D(){\n  const [count,setCount] = useState(0);\n  const [double,setDouble] = useState(count*2);\n  const [three,setThree] = useState(count*3);\n  \n  useEffect(()=>{\n    setDouble(count*2);\n  },[count*2])\n\n  useEffect(()=>{\n    setThree(count);\n  },[])// 为空数组，表示不依赖props或者state，将不会更新\n\n  return (\n    <Fieldset title='userEffect-利用第二个参数跳过效果优化'>\n      <p>+1: {count}</p>\n      <p>*2: {double}</p>\n      <p>not: {three}</p>\n      <input type='button' value='click' onClick={()=>setCount(count+1)}/>\n    </Fieldset>\n  )\n};\n")])])]),n("h2",{attrs:{id:"uselayouteffect-function"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#uselayouteffect-function","aria-hidden":"true"}},[t._v("#")]),t._v(" useLayoutEffect(function,[])")]),t._v(" "),n("ul",[n("li",[t._v("DOM渲染前反应的钩子")]),t._v(" "),n("li",[t._v("基本配置和useEffect一致")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function E(){\n  const [name,setName] = useState(null);\n  useLayoutEffect(()=>{\n    setTimeout(()=>{\n      setName('useLayoutEffect');\n    },3000);\n  },[]);\n  useEffect(()=>{\n    setTimeout(()=>{\n      setName('useEffect');\n    },3000);\n  },[]);\n\n  return(\n    <Fieldset title='useLayoutEffecth和useEffect的区别'>\n      <span id='e-useEffect'>{name}</span>\n    </Fieldset>\n  )\n}\n")])])]),n("h2",{attrs:{id:"usecontext-createcontext"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#usecontext-createcontext","aria-hidden":"true"}},[t._v("#")]),t._v(" useContext(createContext)")]),t._v(" "),n("ul",[n("li",[t._v("参数在所有子组件中都能获取")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const CountContext = createContext();\nfunction F(){\n  function ChildA(){\n    const countChild = useContext(CountContext);\n    return (\n      <p>\n        Child A count: {countChild}\n      </p>\n    )\n  };\n\n  function ChildB(){\n    const countChild = useContext(CountContext);\n    return (\n      <p>\n        Child B count: {countChild}\n      </p>\n    )\n  };\n\n  const [count,setCount] = useState(0);\n\n  return (\n    <Fieldset title='useContext'>\n      <CountContext.Provider value={count}>\n        <ChildA />\n        <ChildB />\n      </CountContext.Provider>\n      <input type='button' value='++' onClick={()=>setCount(count+1)}/>\n    </Fieldset>\n  )\n}\n")])])]),n("h2",{attrs:{id:"usereducer-reducer-initialstate"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#usereducer-reducer-initialstate","aria-hidden":"true"}},[t._v("#")]),t._v(" useReducer(reducer,initialState)")]),t._v(" "),n("ul",[n("li",[t._v("类似redux的功能")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("const [state,dispatch] = useReducer(reducer,initialState,{action});\n// const [属性,动作] = useReducer(动作函数,初始值属性,初始动作);\n// 如何触发：dispatch(type);\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function reducer(state,action){\n  switch(action){\n    case 'reset':\n      return 0;\n      break;\n    case 'increment':\n      return state+1;\n      break;\n    case 'decrement':\n      return state-1;\n      break;\n    default:\n      return state;\n  };\n};\n\nfunction useReduceComponent(){\n  const [state,dispatch] = useReducer(reducer,0,'reset');\n\n  return (\n    <Fieldset title='useReduce'>\n      <p>{state}</p>\n      <input type='button' value='++' onClick={()=>dispatch('increment')}/>\n      <input type='button' value='--' onClick={()=>dispatch('decrement')}/>\n      <input type='button' value='reset' onClick={()=>dispatch('reset')}/>\n    </Fieldset>\n  );\n};\n")])])]),n("h2",{attrs:{id:"usecallback"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#usecallback","aria-hidden":"true"}},[t._v("#")]),t._v(" useCallback(()=>{},[])")]),t._v(" "),n("ul",[n("li",[t._v("返回一个记忆的memoized，默认情况下会记录上一次传递的值")]),t._v(" "),n("li",[t._v("可以替代shouldComponentUpdate使用")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function MemoizedConst ({num}){\n  const memoizedCallback = useCallback(()=>{\n    return num;\n  },[]);\n\n  return (\n    <Fieldset title='MemoizedConst'>\n      <p>记忆 num > {memoizedCallback()}</p>\n      <p>原始 num > {num}</p>\n    </Fieldset>\n  )\n};\n\nfunction UseCallbackComponent (){\n  let [num,setNum] = useState([1,2,3]);\n  useEffect(()=>{\n    setTimeout(function(){\n      setNum([3,4,5])\n    },3000);\n  },[]);\n  \n  return (\n    <Fieldset title='useCallback'>\n      <MemoizedConst num={num}/>\n    </Fieldset>\n  );\n};\n\n// [1,2,3]\n// dely 3000ms\n// [3,4,5]\n")])])]),n("ul",[n("li",[t._v("保存事件，让组件不会重复创建新方法，当你重复点击时，InputComponentState的handleClick的事件总是由组件新创建的。而InputComponentCallback的handleClick会被记忆下来，不会新创建。有利于提高性能。")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("let InputComponentStateFunc = null;\nfunction InputComponentState(){\n  const [state,setState] = useState(0);\n  function handleClick(){\n    setState(state=> state+1);\n  };\n  \n  console.group('InputComponentStateFunc');\n    console.log(InputComponentStateFunc === handleClick);\n  console.groupEnd();\n\n  InputComponentStateFunc = handleClick;\n\n  return (\n    <Fieldset title='InputComponentState'>\n      <input type='button' value={state} onClick={handleClick}/>\n    </Fieldset>\n  )\n};\n\nlet InputComponentCallbackFunc = null;\nfunction InputComponentCallback(){\n  const [state,setState] = useState(0);\n  const handleClick = useCallback((event) => {\n    setState(state=> state+1);\n    event.persist();\n  },[]);\n  \n  console.group('InputComponentCallbackFunc');\n    console.log(InputComponentCallbackFunc === handleClick);\n  console.groupEnd();\n  \n  InputComponentCallbackFunc = handleClick;\n\n  return (\n    <Fieldset title='InputComponentCallback'>\n      {}\n      <input type='button' value={state} onClick={handleClick}/>\n    </Fieldset>\n  )\n};\n\nfunction UseCallbackComponent (){\n  return (\n    <Fieldset title='useCallback'>\n      <InputComponentState />\n      <InputComponentCallback />\n    </Fieldset>\n  );\n};\n")])])]),n("h2",{attrs:{id:"usememo-function"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#usememo-function","aria-hidden":"true"}},[t._v("#")]),t._v(" useMemo(function,[])")]),t._v(" "),n("ul",[n("li",[t._v("和useCallback基本一致，我还没发现有什么区别Q。Q")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function MemoizedLet({num}){\n  const memo = useMemo(()=> num,[]);\n\n  return (\n    <Fieldset title='MemoizedLet'>\n      <p>记忆 num > {memo}</p>\n      <p>原始 num > {num}</p>\n    </Fieldset>\n  )\n};\n\nfunction MemoizedConst({num}){\n  const memo = useMemo(()=> num,[num]);\n\n  return (\n    <Fieldset title='MemoizedConst'>\n      <p>记忆 num > {memo}</p>\n      <p>原始 num > {num}</p>\n    </Fieldset>\n  )\n};\n\nfunction useMemoComponent(){\n  const [num,setNum] = useState([1,2,3]);\n\n  useEffect(()=>{\n    setTimeout(()=>{\n      setNum([3,4,5]);\n    },3000);\n  },[]);\n\n  return (\n    <Fieldset title='useMemoComponent'>\n      <MemoizedLet num={num} />\n      <MemoizedConst num={num}/>\n    </Fieldset>\n  )\n};\n")])])]),n("h2",{attrs:{id:"useref"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#useref","aria-hidden":"true"}},[t._v("#")]),t._v(" useRef()")]),t._v(" "),n("ul",[n("li",[t._v("返回一个ref对象，这个对象将维持在组件的整个生命周期")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function useRefComponent(){\n  const inputEl = useRef(null);\n  \n  function handleClick(){\n    inputEl.current.focus();\n  }\n  return(\n    <Fieldset title='useRef'>\n      <input type='input' placeholder='useRef' ref={inputEl} />\n      <input type='button' value='获取焦点' onClick={handleClick} />\n    </Fieldset>\n  )\n};\n")])])]),n("h2",{attrs:{id:"useimperativemethods-ref"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#useimperativemethods-ref","aria-hidden":"true"}},[t._v("#")]),t._v(" useImperativeMethods(ref,()=>({}))")]),t._v(" "),n("ul",[n("li",[t._v("向父组件公开ref实例")]),t._v(" "),n("li",[t._v("只能应用于forwardRef(props,ref)")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function FancyInput(props,ref){\n  const inputRef = useRef(null);\n  useImperativeMethods(ref,()=>({\n    focus: ()=>{\n      inputRef.current.focus();\n    }\n  }));\n\n  return <input type='input' placeholder='useRef' ref={inputRef}/>\n};\n\nconst Input = forwardRef(FancyInput);\n\nfunction UseImperativeMethodsComponent(){\n  const fancyInputRef = useRef(null);\n  function handleClick(){\n    fancyInputRef.current.focus();\n  };\n\n  return (\n    <Fieldset title='UseImperativeMethods'>\n      <Input ref={fancyInputRef}/>\n      <input type='button' value='获取焦点' onClick={handleClick}/>\n    </Fieldset>\n  )\n};\n")])])]),n("h2",{attrs:{id:"usemutationeffect-function"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#usemutationeffect-function","aria-hidden":"true"}},[t._v("#")]),t._v(" useMutationEffect(function,[])")]),t._v(" "),n("ul",[n("li",[t._v("和useEffect、useLayoutEffect类似")]),t._v(" "),n("li",[t._v("useMutationEffect会在更新阶段触发")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function Effect(){\n  const [state,setState] = useState('请看log')\n  useEffect(()=>{\n    setTimeout(()=>{\n      console.log('useEffect');\n    });\n  },[]);\n\n  useLayoutEffect(()=>{\n    setTimeout(()=>{\n      console.log('useLayoutEffect');\n    });\n  },[]);\n\n  useMutationEffect(()=>{\n    setTimeout(()=>{\n      console.log('useMutationEffect');\n    });\n  },[]);\n\n  return (\n    <React.Fragment>\n      {state}\n    </React.Fragment>\n  )\n}\n\nfunction useMutationEffectComponent(){\n  const [show,setShow] = useState(false);\n  return (\n    <Fieldset title='useMutationEffect'>\n      { show && <Effect />}\n      <input type='button' value='show' onClick={()=>setShow(!show)}/>\n    </Fieldset>\n  )\n};\n")])])]),n("h1",{attrs:{id:"hoc-高级组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hoc-高级组件","aria-hidden":"true"}},[t._v("#")]),t._v(" HOC 高级组件")]),t._v(" "),n("p",[t._v("解释")]),t._v(" "),n("ul",[n("li",[t._v("一个参数为React组件的函数，并且返回一个新函数，一个类工厂。")])]),t._v(" "),n("p",[t._v("优点")]),t._v(" "),n("ul",[n("li",[t._v("高内聚，低耦合")]),t._v(" "),n("li",[t._v("代码复用，高度模块化")])]),t._v(" "),n("p",[t._v("基本用途")]),t._v(" "),n("ul",[n("li",[t._v("增删改props")]),t._v(" "),n("li",[t._v("渲染劫持")])]),t._v(" "),n("p",[t._v("公式")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("React.Component function WrappedComponent(React.Component:Component)\n")])])]),n("p",[t._v("简单例子")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function WrappedComponent(Wrapped){\n  return class extends React.Component{\n    render(){\n      const props = {\n        context: 'React',\n      }\n      return <Wrapped {...props}/>;\n    }\n  }\n};\n\nclass Child extends React.Component{\n  render(){return <div>hello {this.props.context}</div>};\n};\n\nclass App extends React.Component{\n  render(){\n    const HOCchild = WrappedComponent(Child);\n    \n    return(\n      <div>\n        <h1>App</h1>\n        <HOCchild />\n      </div>\n    )\n  }\n};\n")])])]),n("p",[t._v("注意")]),t._v(" "),n("ul",[n("li",[t._v("不要改变原始组件，使用组合的形式")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// 错误示范\n// WrappedComponent 中会覆盖组件的componentDidMount方法\n// 而且使用者必须要知道被覆盖方法的具体用途，才能避免方法冲突覆盖\n\nfunction WrappedComponent(Wrapped) {\n  Wrapped.prototype.componentDidMount = ()=>{\n    console.log('WrappedComponent');\n  };\n\n  return Wrapped;\n};\n\nclass Child extends React.Component{\n  componentDidMount(){\n    console.log('Child');\n  }\n  render(){return <div>hello React</div>};\n};\n\nclass App extends React.Component{\n  render(){\n    const HOCchild = WrappedComponent(Child);\n\n    return(\n      <React.Fragment>\n        <HOCchild />\n      </React.Fragment>\n    )\n  }\n};\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// 正确示范\nfunction wrappedComponent(Wrapped){\n    return class React.Component{\n        componentDibMount(){\n            console.log('componentDibMount')\n        }\n    };\n};\n")])])]),n("ul",[n("li",[t._v("不要直接修改HOC的props，最好独立变量")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// 错误示范\n// props中可能包含太多多余的属性，无法确保高阶组件的灵活度和可重用性\nfunction WrappedComponent(Wrapped){\n    return class React.Component{\n        return <Wrapped {...this.props}/>\n    }\n}\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// 正确\nfunction WrappedComponent(Wrapped){\n    return class React.Component{\n        const {detail} = this.props;\n        return <Wrapped {...detail} />\n    }\n}\n")])])]),n("ul",[n("li",[t._v("包装显示名称，便于调试")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("function WrappedComponent(Wrapped){\n  class WithSubscription extends React.Component{\n    componentDidMount(){\n      console.log('WrappedComponent');\n    }\n    render(){return <Wrapped/>}\n  };\n\n  function getDiplayName(W){\n    return W.displayName || W.name || 'Component';\n  }\n\n  WithSubscription.displayName = `WithSubscription(${getDiplayName(Wrapped)})`\n\n  return WithSubscription;\n};\n")])])]),n("ul",[n("li",[t._v("不要在render函数中使用高阶组件")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("TODO\n")])])]),n("ul",[n("li",[t._v("必须将静态方法做拷贝")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("TODO\n")])])]),n("ul",[n("li",[t._v("Refs属性不能传递")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("TODO\n")])])]),n("h1",{attrs:{id:"无es6创建react-component"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#无es6创建react-component","aria-hidden":"true"}},[t._v("#")]),t._v(" 无ES6创建React Component")]),t._v(" "),n("ul",[n("li",[t._v("create-react-class")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("TODO\n")])])]),n("h1",{attrs:{id:"动态引入-dynamic-import"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#动态引入-dynamic-import","aria-hidden":"true"}},[t._v("#")]),t._v(" 动态引入 dynamic import")]),t._v(" "),n("ul",[n("li",[t._v("React Loadable")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("TODO\n")])])]),n("h1",{attrs:{id:"受控制组件-or-非受控制组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#受控制组件-or-非受控制组件","aria-hidden":"true"}},[t._v("#")]),t._v(" 受控制组件 or 非受控制组件")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("TODO\n")])])])])},[],!1,null,null,null);e.default=s.exports}}]);