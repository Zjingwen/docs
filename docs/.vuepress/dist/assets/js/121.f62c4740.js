(window.webpackJsonp=window.webpackJsonp||[]).push([[121],{288:function(n,e,t){"use strict";t.r(e);var a=t(38),s=Object(a.a)({},function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"有问题贴评论条"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#有问题贴评论条","aria-hidden":"true"}},[n._v("#")]),n._v(" 有问题贴评论条")]),n._v(" "),t("p",[n._v("计算机基础\n计算机网络\nhttp：三次握手（syn、ack、fin），四次分手✅\nhttp协议：基于tcp/ip，udp视频直播、im")]),n._v(" "),t("ul",[t("li",[n._v("请求报文\n-请求头部\ncontent-type:类型✅\ncookie 跨域✅\nHost 跨域？\ncdn 重要\nmax-forward✅\nreferer 网站来源 收集数据 不稳定✅\nuser-agent✅\nupgrade http2.0基于spdy小包协议 优势：压缩头部  ✅https://www.cnblogs.com/wjlog/p/5827168.html\nhttp3.0 基于udp安全协议，解决丢包问题 验证 ---》稳定")]),n._v(" "),t("li",[n._v("响应报文\n-响应头部\nallow✅\npragma✅\nset-cookie✅\ntransfer-encoding✅\n-状态码\nstatus 2xx 3xx 4xx 5xx✅  https://juejin.im/post/5a276865f265da432c23b8d2\n204 没有新内容 301永久重定向  302临时 303 304\nhttps://www.zhihu.com/question/268485682/answer/339150704\n拥塞：断点重连，分包；窗口协议，滑动协议\ndns：浏览器缓存、电脑缓存、dns就近解析、dns向上查询、全球13台dns解析器；通过udp\n协商缓存：https://blog.csdn.net/shadow_zed/article/details/82534283；expired，✅ cache-control，etag、none-match，✅"),t("br"),n._v("\nhttps：tls/ssl，http，rsa rsa256；nginx\nsocket：基于tcp\nservice worker：pwa，\nheaders：request：method：options-post、get（csrf） https://juejin.im/entry/57482a5379bc44005c7e8594\n*分布式系统、网络请求、幂等性\nipv4、ipv6 https://www.ibm.com/support/knowledgecenter/zh/ssw_ibm_i_72/rzai2/rzai2compipv4ipv6.htm")])]),n._v(" "),t("p",[n._v("这下面大概是CS的科班大纲（没精力不用看）")]),n._v(" "),t("p",[n._v("数据结构：\n栈 stack push pop 后进先出；stack 如何进出； stack 实现 queue； Class Stack append(push) pop -> 实现代码；\n括号匹配？\nClass Stack {\n_stack: any[];\nheap: number;\nappend(value: any) {\nthis._stack[heap] = value;\nheap++;\n}\npop() {\nconst result = this._stack[heap];\nheap--;\nreturn result;\n}\n}\n队列 queue push pop 先进先出； Class Queue\n链表：单向链表、双向链表、环；搜索（查、改）、插入、删除\nClass LinkList {\nvalue: any;\nnext: LinkList;\nprev: LinkList\n}\nheap ->   判断链表到尾巴了，链表反相查，查询链表中间值（归并排序）\n树：树、森林、二叉树、平衡二叉树、平衡查找树AVL、红黑树、B+树、线段树、字典树\n二叉树\nClass Node {\nvalue: any;\nleft: Node;\nright: Node;\n// childrens: Node[];\n}\n前缀、中缀、后缀表达式（逆波兰式）\nAST = 递归、dom结构、css、vue；\n判断两棵二叉树相等、递归查找二叉树的加权路径（求和，或者求等于k）\nNode 指针、引用；数组，下标实现二叉树2i , 2i+1，先序遍历\n"),t("em",[n._v("先序遍历、中序遍历、后序遍历\nB树\nhttps://blog.csdn.net/jacke121/article/details/78268602\n复杂一些的树\nClass B-Node {\nvalues: any[];\nparent: Node;\nsbilings: Node[];\nchildrens: Node[];\n}\nB+ link -> leaf\nB")]),n._v(" link -> node\n堆：大顶堆、小顶堆、堆排序 heap\n是一种特殊的树；查找nlogn，删除n^2；\n查找前k大的数在10w个数字中\n散列表hash：常见hash算法、跳表（一亿个数里面查某个值，redis底层实现）\n跳表Node结构 redis、db： value, next（第一个维度），第二个维度 slibing\n映射表：映射的算法，Map[y] = x; y=f(x)； 坐标顺序+，坐标顺序乘\nObject [key] = value\n数组去重：Set、arr.reduce((pre, acc) => pre.includes(acc) ? pre : pre.push(acc), [])\n图：有向图、无向图，最短路（Dijkstra、Bellman-Ford、SPFA、Floyd、A*），最小生成树（Prim、Kruskal），图匹配（匈牙利），网络流\nGraph(Edge, Vertex)\nE(A, B, DistanceValue)\n网络、mac查询 rip ospf、dns查询；发出报文")]),n._v(" "),t("p",[n._v("算法：\n空间复杂度（1，N，nlogn）、时间复杂度（nlogn，递归：快拍）\n搜索：二叉树、B树、Hash表\n排序：选择排序、冒泡、归并、基数排序、快拍、堆拍、插入、桶排序、希尔\n贪心：\n递归：边界条件；递归方式\n非递归实现：stack\n动态规划：状态转移方程；抽象 数学；f(n) = f(n-1) + f(n-2) +... + f(1)\n斐波那契数列；最长不上升子序列、最长不下降序列\n排序网络、矩阵运算、线性规划、多项式与快速傅立叶变换\n有限数论，字符串匹配Rabin-Karp和KMP\n计算几何学、NP完全性、近似算法")]),n._v(" "),t("p",[n._v("面向对象：三大基本概念：封装、多态、继承\n函数式编程：函数是第一公民，y=f(x) lambda ，不变性、纯函数、高阶函数\n设计模式：xxx（太多了）")]),n._v(" "),t("p",[n._v("操作系统\n进程与线程\n虚拟地址，物理地址\n并发、并行；\n异步、同步\n进程间通信：临界区、忙等待互斥、睡眠与唤醒、信号量、互斥量、管程、消息传递、屏障、避免锁\n进程批处理调度：FCFS、SJF、SPF、抢占式、高响应比、时间片轮转、多级队列\n进程调度策略：批处理、交互式、实时；\n交互式调度：轮转、优先级、多级队列、最短进程优先、保证调度、彩票调度、公平分享调度\n实时调度：硬实时、软实时、周期性\nIPC问题：读者-写者、生产者-消费者、哲学家进餐、银行家算法\n互斥、死锁、信号量、PV\n虚页管理：局部性原理，OPT、FIFO、LRU\n页面置换算法：最优页面置换算法、最近未使用页面置换算法（NRU）、先进先出页面置换算法（FIFO）、第二次机会页面置换算法、时钟页面置换算法（clock）、最近最少使用页面置换算法（LRU）、软件模拟LRU、工作集页面置换算法、工作集时钟页面置换算法\n文件结构：磁盘调度：FCFS、SSTF、SCAN、C-SCAN\nI/O：中断、调度、缓冲")]),n._v(" "),t("p",[n._v("计算机组成原理\n缓存淘汰算法：LFU、LRU、ARC、FIFO、MRU\n异步、同步\n中断保护\n奇偶校验、海明码\n流水线、指令集")]),n._v(" "),t("p",[n._v("编译原理\n词法解析、语法解析、语义分析与中间码、代码优化、目标代码生成\nDFA、NFA\nLL(1) 、LR(0)、SLR、LR(1)、LALR\n词法分析、自动机、DFA\n语法分析、语法制导\n中间代码、AST树、类型检查\n堆、栈管理，垃圾回收机制\n目标代码生成、代码优化\n指令集并行性·\n并行性与局部性优化\n过程间分析\n前端：DLS，0、1、2、3文法")]),n._v(" "),t("p",[n._v("数据库\n第一、第二、第三范式、BCNF\n关系型数据库、非关系型数据库")]),n._v(" "),t("p",[n._v("计算机网络补充：\n带宽计算\nMAC寻址\n帧、报文、报文段、分组、包、数据报的概念\nDNS原理\nUDP和TCP\n可靠性数据传输原理、拥塞控制原理\n路由选择：RIP、OSPF、BGP\n差错检验和纠正技术\n计算机网络安全")]),n._v(" "),t("p",[n._v("这之后是可以看得懂的前端的基础知识")]),n._v(" "),t("p",[n._v("前端技术基础\nhtml4、html5\nsemantic：文本排版、seo\ndoctype\nhead：meta、viewport、pre-fetch（icon）\nseo\n字符集 utf-8、Unicode\n实体符号 转义符号\ntable、th、tr、td\niframe\n图像热区\naudio、video\ndrag、drop\ncanvas\ngeolocation\nstorage：localStorage sessionStorage\ncookie：domain、path；http-only；nginx、server\njwt：authorization 字段\ncache manifest\nweb worker、pwa\nsocket\nwebGL\n富文本编辑器\nattribute、property")]),n._v(" "),t("p",[n._v("How Browsers Work: Behind the scenes of modern web browsers：\nhttps://www.html5rocks.com/en/tutorials/internals/howbrowserswork/")]),n._v(" "),t("p",[n._v("DNS解析\n跨域问题\nscript：defer、async、lazyload\nlink\ndocument.onload\ndocument.ready\n延迟加载defer、async\ninnerWidth、innerHeight\nclientWidth、clientHeight\noffsetWidth、offsetHeight")]),n._v(" "),t("p",[n._v("css\ncss 预编译、后编译\ncss层叠选择器权重 id class 标签 inline !important\nflex、grid、table\nBFC、IFC\n盒模型 box-sizing\n伪类、伪元素\n圣杯、双飞燕\n清除浮动\n绘制图形\npx、em、rem、vw、vh、百分比\nposition、 display 基于who？\n响应式、媒体查询\npostcss\n水平居中的n种做法\n垂直居中的n种做法\n移动端1px像素 box-shadow？ dpr\n移动端modal底层滑动 overflow:hidden (x)\n如何按照百分比撑开视频、图片\n邮件模板的布局应该是怎样的？")]),n._v(" "),t("p",[n._v("js\nes5、es6、es7 —— es10  整个规范的制订到发布到正式版\n基础类型、引用类型；Set Map Reflect（少）\nnull、undefined、NaN；typeof、instanceof；prototype、"),t("em",[n._v("proto")]),n._v("\nlodash基础库的实现\nthrottle、debounce\n函数记忆\n模板引擎 ‘$ {0} ’\nthis、原型链、new、闭包\ncall、apply、bind\n什么叫变量对象 ：生命？什么叫活动对象： 执行？\n变量提升hoisting\n暂时性锁区const、let 执行上下文\n严格模式\nAMD、CMD\nESModule、CommonJS 查一下\narguments是什么？callee和caller有什么区别？\n正则表达式\n内存泄漏、垃圾回收\n函数式编程：currying、hoc\nevent loop：要实现\n事件委托、冒泡、捕获\n跨域、jsonp、postMessage\nmicroTask、macroTask 重要，查\npromise异步有一套题：promise实现延迟请求(delay)、并行请求(all)、串行请求（并发，并发阈值）、竞态（race）、重试、节流、中断（cancel）\n如何在前端解析二进制？流媒体、图片二进制数据怎样渲染到页面上？\n懒加载lazyman/lazyload")]),n._v(" "),t("p",[n._v("vue\n生命周期、MVVM\nVue是如何设计响应式系统的？（依赖收集）\n什么时候使用computed, methods, watch？之间有什么样区别？\ncomputed 是计算属性也是一种特殊的 watcher ，它监听其他的 Observer 同时自己也是一个 Observer 可以收集其他的依赖，被其他的 Watcher 监听作为依赖，并且一定会有一个返回值。而 watch 就是单纯的 watcher，只能收集别的依赖并且没有返回值。methods 就是普通的方法，因为 Vue 的魔法，内部 this 会指向 vm 实例(箭头函数不受影响)\ntemplate 和 render(jsx) 有什么的联系？\n两者本质都是字符串，最终经过处理翻译成 vnode 的词法树。区别在于 template这个魔法只能 Vue 识别，并且其中加入了 Vue 的 DSL，比如指令 管道等( ng的概念，黑魔法+1)，而 JSX 则被更广泛的 babel 解析，适配 JS 和 TS 更好，能够得到更多的语法高亮支持\nthis.$nextTick是如何设计的？\n在 Vue 中，因为数据的而发生的渲染会被统一的加入一个渲染队列(进行优化，防止重复的渲染)，这个队列将会异步的渲染(一个 task 里发生的数据变动将会在一个渲染队列里)，因此会出现数据改变后，在同步的代码中却不能获取正确的 DOM 变化情况，因此 Vue 暴露出 $nextTick 钩子，在渲染结束后执行。$nextTick 本身也是异步的，并且通过兼容性实现，依次判断浏览器是否支持 setImmedite Promise.resolve 回调方法后执行。resolve 并不是最优解，因为这是一个 microtask 任务，可能导致会比渲染先执行(渲染是一个 task)\nVue 组件 data 为什么必须是函数？\n因为以配置的方式声明的 Vue 组件是一个对象，这个对象可能会被多处使用，导致多个组件使用相同的数据。因此使用函数为一个实例化的组件在堆上分配不同的内存\nVue.nextTick\nhttps://segmentfault.com/a/1190000016351284\nSSR")]),n._v(" "),t("p",[n._v("vue-router\n路由实现\nhistory pushState replaceState popState\nvue-router 是一个面向接口的很好实现。本身是封装了基于 hash 和 history 两种模式的变化。这两个都是关于 URL 的变化，并且会有相应的回调事件，vue-router 针对它们封装使得他们的表现行为一致。与 react-router 相比。因为 react 本身只有组件的概念，react-router 本身也是一个组件，只是根据 URL 不同渲染不同的子组件。vue-router 做的要比 react-router 好很多\nvuex")]),n._v(" "),t("p",[n._v("react：\nReact的生命周期mount和update描述下\nmount 是 componentDidMount 在虚拟DOM完成渲染挂载到真实DOM之后执行的钩子，一个组件在一个生命周期内只会出现一次。而 componetDidUpdate 是组件完成渲染，接受到的 Props 或者本身 State 发生变更后，引起的 render 完成，DOM改变之后执行的钩子。在16.3以后，有3个参数，分别是 prevProps prevState customObject(getSnapshotBeforeUpdate\n中返回的对象)，这个钩子在组件中可能被多次执行\nReact的生命周期中的isBatchingUpdates了解吗？Transaction知道吗\nReact的vdom如何实现？jsx是怎样解析的？\nReact的Fiber是什么？具有什么样的特性？\nfiber 是 React 16 以后提出的一种新的渲染模型，在此之前 DOM 的渲染都是同步的执行 render 方法发生改变后提交 patch 给虚拟DOM，当大量的组件在同一个时间段发生改变，那么浏览器将会一直调用这些组件的render方法导致此时执行其他的UI事件失去响应，造成页面卡顿。16以后提出了，只在浏览器空闲的时候执行render方法，通过调用浏览器的 requestIdelCallback API 实现。如果超时则打断这部分的render执行，而去响应优先级更高的UI事件。这也是 React 一直强调 render 方法应该是纯函数的原因，因为可能随时被中断\nReact的diff/patch算法原理\nReact的组件逻辑（受控、非受控）？如何设计一个组件库\n受控组件的 value 将受到父组件传递的 props 影响，不是组件本身控制。而非受控组件则是组件本身控制。设计上受控组件要求父组件传递一个 onChange 方法，受控组件的值发生改变的时候不是直接改变本身的值，而是通过调用父组件的方法，改变父组件的状态进而改变Props\nReact的数据流，Redux、Mobx、Rxjs，发布订阅模式、观察者模式，flux和no-flux\nReact的事件注册和事件分发知道吗？\nRedux解决了什么痛点（有什么优点），又有什么缺点\nRedux的中间件有哪些？redux-actions、redux-promise、redux-thunk、redux-saga、redux-immutable了解过哪些？说说中间件的意义\nRedux有什么优化方案？\nSSR了解过吗？怎样做？了解Koa么？\nReact-Native了解过吗？JavascriptCore是什么？\nReact的Suspense、time slicing，hooks最佳应用场景？")]),n._v(" "),t("p",[n._v("场景题：\n一个feed流，有哪些展现方式？如果当前页面可视区有5个格子，而你有20条信息需要展示，请问有哪些自动展示的算法？\n移动端的缓存机制有哪几种？\n小程序如何与native通信？react-native实现原理？jsbridge如何实现？\n过万条数据如何加载和渲染？\n如何在前端解析二进制，流媒体、图片二进制数据怎样渲染到页面上？\n如何解析二进制音频、视频？\n文件如何显示上传百分比？\n如何制作一个富文本，需要考虑哪些结构？\nhtml5的播放器怎么做？视频直播如何在浏览器里面实现？HLS、RTMP\n如何在浏览器里面裁剪图片？如何裁剪视频，对视频做逐帧分析？\n如何实现一个具有引导功能的组件库？\n如何封装一个Form和FormItem，使其能够跟input、select、checkbox、radio等组件进行 数据存储、数据校验（自定义逻辑）、校验反馈？\nechart这类图像库的实现原理？\ni18n的国际化方案应该是怎样的？\n数据埋点的意义是什么？应当针对哪些数据进行埋点？如何构建一个埋点系统？\n小程序的实现原理是什么？这【五篇】文章将带你深入了解「微信小程序」\n小游戏的实现原理是什么？Cocos知乎文章：微信小游戏上手、深入理解使用白鹭引擎开发微信小游戏的构建机制\nmpvue这样h5转小程序的工具的原理是什么？怎样去实现？官方宣传文档、如何看待美团开源mpvue")]),n._v(" "),t("p",[n._v("杂鱼题：\nparseQuery\nflatten\n乱序算法（Fisher–Yates）\n模版引擎\n反转二叉树\n二叉树路径遍历、二叉树路径求和\n将两个有序数组合并成为一个有序数组\n全选和单行选中的联动\n数组去重，考虑object、NaN、数字1，弱类型转换\n汉诺塔的实现\nbind\ncurrying\n一个无重复元素的数组，求所有两数之和为k的组合\n变体题：一个无重复元素的数组，求元素和（元素个数小于n）为k的组合\n有序数组合并、数组reverse\n实现events(发布订阅/观察者模式)\n找出数组中最大的两数之差\n棋盘最短路：动态规划、搜索+剪枝、时间优化、空间优化\n二叉树遍历：前序、后序、中序，时间复杂度，空间复杂度O(1)，递归非递归\n双向链表寻找中间的元素，单向链表寻找中间的元素\n查找数组中第k大的数")]),n._v(" "),t("p",[n._v("node：\n中间件机制、性能问题\n上下游监控、bug定位\ncpu占用、内存占用\nhttps://segmentfault.com/p/1210000008474391/read\n并发阈值控制\nprocess.nextTick https://nodejs.org/zh-cn/docs/guides/event-loop-timers-and-nexttick/\n常用的功能模块设计：logger、consul、metric、sentry、rpc、grpc、各种常用中间件、中间件机制\n调用栈是什么？如何追查调用栈的问题\n进程间通信？集群通信？守护进程？中断处理？\ncluster？\n负载？集群调度？数据库、网络、I/O瓶颈？")]),n._v(" "),t("p",[n._v("Golang：")]),n._v(" "),t("p",[n._v("go 和 java、javascript 有什么区别？\ngo 有多少种数据类型？各占多少字节？如何计算一个 struct 字节？移动 struct 中属性位置会影响计算大小吗？为什么？\n如何区分变量分配在栈中或堆中？什么是内存逃逸？\n什么是数组？什么是切片？两者有什么区别？容量 size有什么区别？切片的容量不够继续写入 go 会做些什么？\n讲讲 go 的接口？\ngo 如何实现面向对象(面向接口)?\nchannel 用的多还是 sync.Lock 用得多？有什么区别？两者适合什么样的场景？\ngo 如何实现并发？什么是协程？什么是 CMP ? 什么是 GMP ？\n为什么 go 能一次打包在多处运行？\n了解过 webassembly 吗？\n讲讲 go 的内存分配？垃圾回收？\n了解 C10K 吗？做过的项目有多大的 QPS ，如何检测项目的性能？还有哪些可优化的点")]),n._v(" "),t("p",[n._v("工程方向\nwebpack\nbundle、chunk\nloader、plugin\n模块热更新\n长缓存\ntree shaking\n优化打包速度、多线程\n如何实现loader：https://segmentfault.com/a/1190000012718374、https://webpack.docschina.org/contribute/writing-a-loader/\n如何实现plugin：https://segmentfault.com/a/1190000012840742、https://webpack.docschina.org/contribute/writing-a-plugin/")]),n._v(" "),t("p",[n._v("babel\n运行原理：https://www.jianshu.com/p/e9b94b2d52e2\n插件原理：https://segmentfault.com/a/1190000016359110\nhttps://zhuanlan.zhihu.com/p/27289600\nhttps://zhuanlan.zhihu.com/p/43249121")]),n._v(" "),t("p",[n._v("npm、yarn\n包管理、包发布、回退\n版本控制、开发者权限分类\n如何搭建一个npm\n多包管理lerna\n版本依赖、版本锁、如何开发测试、如何上线、CHANGELOG")]),n._v(" "),t("p",[n._v("git\n常规骚操作、黑魔法\n钩子的各种延伸用法：commit的钩子、push的钩子、merge的钩子\n命名规范、命名依赖：angular的命名规则")]),n._v(" "),t("p",[n._v("k8s\n#todo")]),n._v(" "),t("p",[n._v("画饼充饥\n跨端技术：架构方案、开发方案\nTWA\n流程自动化、测试自动化\n工程监控全面覆盖\n物料系统\nBFF\n编辑器、协同编辑、思维导图、docker、sheet、ppt\n高频办公软件、electron、calendar打通\n工作流软件、项目管理到工程上线概念打通、jira+wiki+flow\n国际化文案管理、编译、shaking、实时更新、兜底数据\nABtest\n云管理方案")]),n._v(" "),t("p",[n._v("devops：jenkins\nhttps://github.com/kamranahmedse/developer-roadmap")]),n._v(" "),t("p",[n._v("DNS：dns预加载、dns解析、dns加速、网络算法优化、内网解析、集群解析、外网解析\nCDN：CDN压缩、就近查找、webp、多地容灾切换\nslardar：性能指标、监控数据、问题分析（DNS、服务器、网络、当地环境）\nsentry：前端错误监控、服务端错误监控\nmetrics、grafana：qps、延迟、cpu、memcache、disk、i/o、process、error\n安全方向：xss、csrf（salt） https://imweb.io/topic/56f895bf14ea0f7263803d5b、jwt、authorization token\n流程：lint-stage + prettier，code review，回滚机制，版本锁，敏捷开发，工作流（gitflow）\n架构：可视化、自动化\n工程环境：CI/CD流程、规范，打包、版本控制，数据接入\n预发环境：测试环境、云主机、云浏览器、地址映射、常规打包发布流程，直接线上替换\nAMP：Google的加速技术，具体查资料去\nflutter：新兴的跨端技术方案，具体落地需要实践\nhybrid：混合技术，离线化、增量包、定量推送、渠道管理、版本管理\n微服务：\nPaaS：\nIaaS：\nIOT：\n大中台：\n数据平台：\n沙盒环境（sandbox）：")]),n._v(" "),t("p",[n._v("assemble、graphQL、IndexedDB、WebRTC、WebAR/WebVR、WebKit\nhttp://www.cssfan.cn/429.html")]),n._v(" "),t("p",[n._v("团队协作\n职级问题\n什么样的问题是工程问题？如何思考问题？")]),n._v(" "),t("p",[n._v("软素质  p5；\n团队合作，如何撕逼，如何甩锅（明确责任）；\n沟通：条理性，1、2、3；就事论事；\n推动力、cover：升p6；\n影响力：升p7；\n自驱：\n团队：\n产品影响力、产品指标、需求分配（人力、时间）\n产品体验、性能指标、性能优化、上下游完善\n团队技术规划（技术池、新技术探索）、技术落地、技术推广\n技术痛点梳理，理解每一阶段的核心的点，以及成本和推进，确定时间节点，明确职责和职能，有理有据，客观明确\n工作流程、性能监控、各类指标体系（稳定性、加载速度、上下游）\n个人技术规划、职业规划、负责方向完善")]),n._v(" "),t("p",[n._v("技术规划\n拓展对于后端的知识覆盖\n对团队的协作、管理、规划\n推进体系完善，落地项目\nredis、sql、集群、网络、nginx、并发、MQ、进程与线程（守护、锁、拥塞、通信）\noom、gc、io、滑动窗口、rpc、thrift、elasticsearch、分布式\nhttps://github.com/xingshaocheng/architect-awesome\nhttps://github.com/davideuler/architecture.of.internet-product")]),n._v(" "),t("p",[n._v("技术护城河\n纯前端方向没有任何技术护城河\n跨端、跨平台、跨方向才可能有技术护城河，需要时间和精力吃透的技术才有壁垒，同时这种技术必须是可以应用的、不广泛应用，但必不可少")])])},[],!1,null,null,null);e.default=s.exports}}]);